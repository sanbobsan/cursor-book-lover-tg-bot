
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from app import keyboards as kb
from app import json_loader as json


router = Router()


async def answer_book(message: Message, book: dict):
    "–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–Ω–∏–≥–µ"
    text = f"""
üìñ {book['title']}
üë§ {book['author']}
üè∑Ô∏è {book['genre']}
‚≠ê {round(book['mark'], 2)}
"""
    await message.answer_photo(photo=book['image_url'], caption=text, reply_markup=kb.menu)


async def answer_books(message: Message, books: list):
    "–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–Ω–∏–≥–∞—Ö"
    text = ""
    for n, book in enumerate(books):
        text += f"{n + 1}. {book['title']} üë§ {book['author']} - {round(book['mark'], 2)}‚≠ê\n"
    await message.answer(text=text, reply_markup=kb.menu)


class FindBook(StatesGroup):
    finding_by_genre = State()
    finding_by_title  = State()


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await message.answer('–ø—Ä–∏–≤–µ—Ç, —è –±–æ—Ç', reply_markup=kb.to_menu)
    await state.clear()


@router.message((F.text == "/menu") | (F.text.lower() == "–º–µ–Ω—é"))
async def menu(message: Message, state: FSMContext):
    await message.answer('—ç—Ç–æ –º–µ–Ω—é, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏', reply_markup=kb.menu)
    await state.clear()


#region States
@router.message(F.text, FindBook.finding_by_genre)
async def find_by_genre(message: Message, state: FSMContext):
    genre = message.text.lower()
    genres = json.get_all_genres()
    if genre in [genre.lower() for genre in genres]: 
        books = json.find_books_by_genre(genre)
        await answer_books(message, books)
        await state.clear()
    else:
        await message.answer('–ñ–∞–Ω—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É', reply_markup=kb.genres)


@router.message(F.text, FindBook.finding_by_title)
async def find_by_title(message: Message, state: FSMContext):
    title = message.text.lower()
    book = json.find_book_by_title(title)
    if book is not None:
        await answer_book(message, book)
        await state.clear()
    else:
        await message.answer('–ò–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É', reply_markup=kb.to_menu)
#endregion


@router.message((F.text == "/top") | (F.text.lower() == "—Ç–æ–ø"))
async def top(message: Message):
    books = json.get_top_of_books()
    await answer_books(message, books)


@router.message((F.text == "/genre") | (F.text.lower() == "–ø–æ –∂–∞–Ω—Ä–∞–º"))
async def genre(message: Message, state: FSMContext):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –∏–∑ —Å–ø–∏—Å–∫–∞', reply_markup=kb.genres)
    await state.set_state(FindBook.finding_by_genre)


@router.message((F.text == "/random") | (F.text.lower() == "—Å–ª—É—á–∞–π–Ω–æ"))
async def random(message: Message):
    book = json.get_random_book()
    await answer_book(message, book)


@router.message((F.text == "/search") | (F.text.lower() == "–ø–æ–∏—Å–∫"))
async def search(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏', reply_markup=kb.to_menu)
    await state.set_state(FindBook.finding_by_title)

