# # from aiogram import Bot, Dispatcher
# # from aiogram.filters.command import Command
# # from aiogram.types import Message
# # import asyncio
# #
# # # –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
# # token = "8445920850:AAEXH3HrLkNq1Yv2Gmfj-hjx78uDuQZCgt0"
# # bot = Bot(token)
# # # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
# # dp = Dispatcher()
# #
# # @dp.message(Command('start'))
# # async def main(message: Message):  # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é —Ç–∏–ø–∞
# #     await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π. –ß—Ç–æ —è —É–º–µ—é: –ö–Ω–∏–≥–∏ –ø–æ —Ç–µ–≥–∞–º!')
# #
# # # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
# # async def start_bot():
# #     await dp.start_polling(bot)
# #
# # if __name__ == "__main__":
# #     asyncio.run(start_bot())
#
# import os
# import asyncio
# from aiogram import Bot, Dispatcher, types, F
# from aiogram.filters import Command
# from aiogram.fsm.context import FSMContext
# from aiogram.fsm.state import State, StatesGroup
# from aiogram.types import Message, ReplyKeyboardRemove
# from aiogram.utils.keyboard import InlineKeyboardBuilder
#
# # Mock data
# books = [
#     {
#         "title": "–í–æ–π–Ω–∞ –∏ –º–∏—Ä",
#         "author": "–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π",
#         "genre": "–†–æ–º–∞–Ω",
#         "image_url": "https://static.insales-cdn.com/images/products/1/160/208213088/large_%D0%92%D0%BE%D0%B9%D0%BD%D0%B0_%D0%B8_%D0%BC%D0%B8%D1%80_%D0%9B.%D0%9D._%D0%A2%D0%BE%D0%BB%D1%81%D1%82%D0%BE%D0%B9.jpg",
#         "reviews": ["–í–µ–ª–∏–∫–∞—è –∫–Ω–∏–≥–∞", "–ö–ª–∞—Å—Å–∏–∫–∞", "–ú–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"]
#     },
#     {
#         "title": "–ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ",
#         "author": "–§–µ–¥–æ—Ä –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π",
#         "genre": "–†–æ–º–∞–Ω",
#         "image_url": "https://cdn.img-gorod.ru/nomenclature/27/000/27000053.jpg",
#         "reviews": ["–ì–ª—É–±–æ–∫–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ", "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–æ–º–∞–Ω"]
#     },
#     {
#         "title": "–ú–∞—Å—Ç–µ—Ä –∏ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞",
#         "author": "–ú–∏—Ö–∞–∏–ª –ë—É–ª–≥–∞–∫–æ–≤",
#         "genre": "–†–æ–º–∞–Ω",
#         "image_url": "https://cdn.img-gorod.ru/nomenclature/22/000/22000060.jpg",
#         "reviews": ["–ú–∏—Å—Ç–∏–∫–∞", "–õ—é–±–æ–≤—å –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ"]
#     },
#     {
#         "title": "1984",
#         "author": "–î–∂–æ—Ä–¥–∂ –û—Ä—É—ç–ª–ª",
#         "genre": "–ê–Ω—Ç–∏—É—Ç–æ–ø–∏—è",
#         "image_url": "https://upload.wikimedia.org/wikipedia/ru/c/c0/1984_first_edition_cover.jpg",
#         "reviews": ["–¢–æ—Ç–∞–ª–∏—Ç–∞—Ä–∏–∑–º", "–ü—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–æ"]
#     }
# ]
#
# class SearchState(StatesGroup):
#     waiting_for_query = State()
#
# # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
# token = "8445920850:AAEXH3HrLkNq1Yv2Gmfj-hjx78uDuQZCgt0"
# bot = Bot(token)
# dp = Dispatcher()
#
# @dp.message(Command('start'))
# async def cmd_start(message: Message):
#     await message.answer(
#         "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥.\n"
#         "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /search –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∞–≤—Ç–æ—Ä—É."
#     )
#
# @dp.message(Command('search'))
# async def cmd_search(message: Message, state: FSMContext):
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
#     await state.set_state(SearchState.waiting_for_query)
#
# @dp.message(SearchState.waiting_for_query)
# async def process_search(message: Message, state: FSMContext):
#     query = message.text.lower()
#     found_books = []
#     for book in books:
#         if query in book['title'].lower() or query in book['author'].lower():
#             found_books.append(book)
#
#     if not found_books:
#         await message.answer("–ö–Ω–∏–≥–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
#         await state.clear()
#         return
#
#     # –û–≥—Ä–∞–Ω–∏—á–∏–º –≤—ã–≤–æ–¥ —Ç—Ä–µ–º—è –∫–Ω–∏–≥–∞–º–∏
#     for book in found_books[:3]:
#         # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–Ω–∏–≥–µ
#         text = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {book['title']}\n–ê–≤—Ç–æ—Ä: {book['author']}\n–ñ–∞–Ω—Ä: {book['genre']}\n"
#         if book['reviews']:
#             text += "–û—Ç–∑—ã–≤—ã:\n" + "\n".join([f"- {review}" for review in book['reviews']])
#         else:
#             text += "–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
#
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç
#         await message.answer_photo(photo=book['image_url'], caption=text)
#
#     await state.clear()
#
# if __name__ == '__main__':
#     asyncio.run(dp.start_polling(bot))


import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message
from aiogram.exceptions import TelegramBadRequest

# Mock data —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
books = [
    {
        "title": "–í–æ–π–Ω–∞ –∏ –º–∏—Ä",
        "author": "–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π",
        "genre": "–†–æ–º–∞–Ω",
        "image_url": "https://via.placeholder.com/300x400?text=–í–æ–π–Ω–∞+–∏+–º–∏—Ä",
        "reviews": ["–í–µ–ª–∏–∫–∞—è –∫–Ω–∏–≥–∞", "–ö–ª–∞—Å—Å–∏–∫–∞", "–ú–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"]
    },
    {
        "title": "–ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ",
        "author": "–§–µ–¥–æ—Ä –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π",
        "genre": "–†–æ–º–∞–Ω",
        "image_url": "https://via.placeholder.com/300x400?text=–ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ+–∏+–Ω–∞–∫–∞–∑–∞–Ω–∏–µ",
        "reviews": ["–ì–ª—É–±–æ–∫–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ", "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–æ–º–∞–Ω"]
    },
    {
        "title": "–ú–∞—Å—Ç–µ—Ä –∏ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞",
        "author": "–ú–∏—Ö–∞–∏–ª –ë—É–ª–≥–∞–∫–æ–≤",
        "genre": "–†–æ–º–∞–Ω",
        "image_url": "https://via.placeholder.com/300x400?text=–ú–∞—Å—Ç–µ—Ä+–∏+–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞",
        "reviews": ["–ú–∏—Å—Ç–∏–∫–∞", "–õ—é–±–æ–≤—å –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ"]
    },
    {
        "title": "1984",
        "author": "–î–∂–æ—Ä–¥–∂ –û—Ä—É—ç–ª–ª",
        "genre": "–ê–Ω—Ç–∏—É—Ç–æ–ø–∏—è",
        "image_url": "https://via.placeholder.com/300x400?text=1984",
        "reviews": ["–¢–æ—Ç–∞–ª–∏—Ç–∞—Ä–∏–∑–º", "–ü—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–æ"]
    }
]

class SearchState(StatesGroup):
    waiting_for_query = State()

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
token = "8445920850:AAEXH3HrLkNq1Yv2Gmfj-hjx78uDuQZCgt0"
bot = Bot(token)
dp = Dispatcher()

@dp.message(Command('start'))
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /search –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∞–≤—Ç–æ—Ä—É.\n\n"
        "–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n"
        "/top - —Ç–æ–ø –∫–Ω–∏–≥\n"
        "/random - —Å–ª—É—á–∞–π–Ω–∞—è –∫–Ω–∏–≥–∞"
    )

@dp.message(Command('search'))
async def cmd_search(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(SearchState.waiting_for_query)

@dp.message(Command('top'))
async def cmd_top(message: Message):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 –∫–Ω–∏–≥–∏
    top_books = books[:3]
    for book in top_books:
        text = f"üìñ {book['title']}\nüë§ {book['author']}\nüè∑Ô∏è {book['genre']}\n"
        if book['reviews']:
            text += "‚≠ê –û—Ç–∑—ã–≤—ã:\n" + "\n".join([f"- {review}" for review in book['reviews'][:2]])

        try:
            await message.answer_photo(photo=book['image_url'], caption=text)
        except TelegramBadRequest:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await message.answer(text)

@dp.message(Command('random'))
async def cmd_random(message: Message):
    import random
    book = random.choice(books)
    text = f"üìñ {book['title']}\nüë§ {book['author']}\nüè∑Ô∏è {book['genre']}\n"
    if book['reviews']:
        text += "‚≠ê –û—Ç–∑—ã–≤—ã:\n" + "\n".join([f"- {review}" for review in book['reviews'][:2]])

    try:
        await message.answer_photo(photo=book['image_url'], caption=text)
    except TelegramBadRequest:
        await message.answer(text)

@dp.message(SearchState.waiting_for_query)
async def process_search(message: Message, state: FSMContext):
    query = message.text.lower()
    found_books = []

    for book in books:
        if query in book['title'].lower() or query in book['author'].lower():
            found_books.append(book)

    if not found_books:
        await message.answer("–ö–Ω–∏–≥–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await state.clear()
        return

    for book in found_books[:3]:
        text = f"üìñ {book['title']}\nüë§ {book['author']}\nüè∑Ô∏è {book['genre']}\n"
        if book['reviews']:
            text += "‚≠ê –û—Ç–∑—ã–≤—ã:\n" + "\n".join([f"- {review}" for review in book['reviews'][:2]])

        try:
            await message.answer_photo(photo=book['image_url'], caption=text)
        except TelegramBadRequest:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await message.answer(text)

    await state.clear()

if __name__ == '__main__':
    asyncio.run(dp.start_polling(bot))